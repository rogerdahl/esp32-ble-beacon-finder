#include "console/console.h"
#include "driver/gpio.h"

#include "esp_log.h"
#include "esp_nimble_hci.h"

#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"
#include "freertos/task.h"

#include "host/ble_hs.h"
#include "host/util/util.h"

#include "nimble/nimble_port.h"
#include "nimble/nimble_port_freertos.h"

#include "nvs_flash.h"

#include "services/gap/ble_svc_gap.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "blecent.h"

#include <inttypes.h>
#include <sys/time.h>
#include <hd44780.h>
#include <pcf8574.h>
#include <string.h>

#include "beep.h"
#include "lcd.h"


static const char *TAG = "main";


struct BEACON {
    // char[32] complete_local_name;
    char *nickName;
    ble_addr_t bleAddr;
};

struct BEACON BEACONS[] = {
    // Complete Local Name = Kensington Eureka 4936
    {
        "RACHAEL",
        // The Address bytes are required in reverse order.
        // Regular order, from phone: 0x78, 0xc5, 0xe5, 0xa1, 0x49, 0x36
        {0x00, {0x36, 0x49, 0xa1, 0xe5, 0xc5, 0x78}},
    },
    // Complete Local Name = Kensington Eureka 5727
    {
        "BELA",
        // Regular order, from phone: 0x78, 0xc5, 0xe5, 0xa1, 0x57, 0x27
        {0x00, {0x27, 0x57, 0xa1, 0xe5, 0xc5, 0x78}},
    },
    {0}
    // Something
    // {0x00, {0x66, 0x28, 0x15, 0xc4, 0x98, 0x3f}},
    // {0x00, {0x02, 0x6c, 0x40, 0xfd, 0x2a, 0x86}};
};


volatile int listenBeaconIndex = 0;
volatile int lastDbm = 0;
volatile int secondsSinceLast = 0;

/**
 * GPIO4:  Select listen addr (don't switch to new addr with stronger signal)
 * GPIO5:  Reset, NOT USED FOR NOW. JUST RESET THE BOARD.
 */
#define GPIO_BUTTON_SELECT_BEACON      5
// #define GPIO_BUTTON_RESET     6
// #define GPIO_INPUT_PIN_SEL    ((1ULL << GPIO_BUTTON_SELECT_BEACON) | (1ULL << GPIO_BUTTON_RESET))
#define GPIO_INPUT_PIN_SEL    (1ULL << GPIO_BUTTON_SELECT_BEACON)
#define ESP_INTR_FLAG_DEFAULT 0

// static xQueueHandle gpio_evt_queue = NULL;

// static void IRAM_ATTR

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
volatile bool lastState;

static void selectBeaconDebounceTask(void *arg);

void gpio_isr_select_beacon_handler(void *arg)
{
    gpio_intr_disable(GPIO_BUTTON_SELECT_BEACON);

    listenBeaconIndex += 1;
    if (BEACONS[listenBeaconIndex].nickName == NULL) {
        listenBeaconIndex = 0;
    }

    xTaskCreate(selectBeaconDebounceTask, "selectBeaconDebounceTask", configMINIMAL_STACK_SIZE * 5, NULL, 5, NULL);
}

static void selectBeaconDebounceTask(void *arg)
{
    lcd_print(0, BEACONS[listenBeaconIndex].nickName);
    vTaskDelay(10);
    gpio_intr_enable(GPIO_BUTTON_SELECT_BEACON);
    vTaskDelete(NULL);
}

static void secondCounterTask(void *arg)
{
    TickType_t xLastWakeTime = xTaskGetTickCount ();
    for (;;) {
          lcd_print(1, "%ld %dBm %ld sec", lastDbm, secondsSinceLast);
          ++secondsSinceLast;
            BaseType_t xWasDelayed = xTaskDelayUntil( &xLastWakeTime, 1);
    }
}


static int blecent_gap_event(struct ble_gap_event *event, void *arg);


void ble_store_config_init(void);

/**
 * Application callback.  Called when the attempt to subscribe to notifications
 * for the ANS Unread Alert Status characteristic has completed.
 */
static int
blecent_on_subscribe(uint16_t conn_handle,
                     const struct ble_gatt_error *error,
                     struct ble_gatt_attr *attr,
                     void *arg)
{
    MODLOG_DFLT(INFO, "Subscribe complete; status=%d conn_handle=%d "
                "attr_handle=%d\n",
                error->status, conn_handle, attr->handle);

    return 0;
}

/**
 * Application callback.  Called when the write to the ANS Alert Notification
 * Control Point characteristic has completed.
 */
static int
blecent_on_write(uint16_t conn_handle,
                 const struct ble_gatt_error *error,
                 struct ble_gatt_attr *attr,
                 void *arg)
{
    MODLOG_DFLT(INFO,
                "Write complete; status=%d conn_handle=%d attr_handle=%d\n",
                error->status, conn_handle, attr->handle);

    /* Subscribe to notifications for the Unread Alert Status characteristic.
     * A central enables notifications by writing two bytes (1, 0) to the
     * characteristic's client-characteristic-configuration-descriptor (CCCD).
     */
    const struct peer_dsc *dsc;
    uint8_t value[2];
    int rc;
    const struct peer *peer = peer_find(conn_handle);

    dsc = peer_dsc_find_uuid(peer,
                             BLE_UUID16_DECLARE(BLECENT_SVC_ALERT_UUID),
                             BLE_UUID16_DECLARE(BLECENT_CHR_UNR_ALERT_STAT_UUID),
                             BLE_UUID16_DECLARE(BLE_GATT_DSC_CLT_CFG_UUID16));
    if (dsc == NULL) {
        MODLOG_DFLT(ERROR, "Error: Peer lacks a CCCD for the Unread Alert "
                    "Status characteristic\n");
        goto err;
    }

    value[0] = 1;
    value[1] = 0;
    rc = ble_gattc_write_flat(conn_handle, dsc->dsc.handle,
                              value, sizeof value, blecent_on_subscribe, NULL);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "Error: Failed to subscribe to characteristic; "
                    "rc=%d\n", rc);
        goto err;
    }

    return 0;
err:
    /* Terminate the connection. */
    return ble_gap_terminate(peer->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
}

/**
 * Application callback.  Called when the read of the ANS Supported New Alert
 * Category characteristic has completed.
 */
static int
blecent_on_read(uint16_t conn_handle,
                const struct ble_gatt_error *error,
                struct ble_gatt_attr *attr,
                void *arg)
{
    MODLOG_DFLT(INFO, "Read complete; status=%d conn_handle=%d", error->status,
                conn_handle);
    if (error->status == 0) {
        MODLOG_DFLT(INFO, " attr_handle=%d value=", attr->handle);
        print_mbuf(attr->om);
    }
    MODLOG_DFLT(INFO, "\n");

    /* Write two bytes (99, 100) to the alert-notification-control-point
     * characteristic.
     */
    const struct peer_chr *chr;
    uint8_t value[2];
    int rc;
    const struct peer *peer = peer_find(conn_handle);

    chr = peer_chr_find_uuid(peer,
                             BLE_UUID16_DECLARE(BLECENT_SVC_ALERT_UUID),
                             BLE_UUID16_DECLARE(BLECENT_CHR_ALERT_NOT_CTRL_PT));
    if (chr == NULL) {
        MODLOG_DFLT(ERROR, "Error: Peer doesn't support the Alert "
                    "Notification Control Point characteristic\n");
        goto err;
    }

    value[0] = 99;
    value[1] = 100;
    rc = ble_gattc_write_flat(conn_handle, chr->chr.val_handle,
                              value, sizeof value, blecent_on_write, NULL);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "Error: Failed to write characteristic; rc=%d\n",
                    rc);
        goto err;
    }

    return 0;
err:
    /* Terminate the connection. */
    return ble_gap_terminate(peer->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
}

/**
 * Performs three GATT operations against the specified peer:
 * 1. Reads the ANS Supported New Alert Category characteristic.
 * 2. After read is completed, writes the ANS Alert Notification Control Point characteristic.
 * 3. After write is completed, subscribes to notifications for the ANS Unread Alert Status
 *    characteristic.
 *
 * If the peer does not support a required service, characteristic, or
 * descriptor, then the peer lied when it claimed support for the alert
 * notification service!  When this happens, or if a GATT procedure fails,
 * this function immediately terminates the connection.
 */
static void
blecent_read_write_subscribe(const struct peer *peer)
{
    const struct peer_chr *chr;
    int rc;

    /* Read the supported-new-alert-category characteristic. */
    chr = peer_chr_find_uuid(peer,
                             BLE_UUID16_DECLARE(BLECENT_SVC_ALERT_UUID),
                             BLE_UUID16_DECLARE(BLECENT_CHR_SUP_NEW_ALERT_CAT_UUID));
    if (chr == NULL) {
        MODLOG_DFLT(ERROR, "Error: Peer doesn't support the Supported New "
                    "Alert Category characteristic\n");
        goto err;
    }

    rc = ble_gattc_read(peer->conn_handle, chr->chr.val_handle,
                        blecent_on_read, NULL);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "Error: Failed to read characteristic; rc=%d\n",
                    rc);
        goto err;
    }

    return;
err:
    /* Terminate the connection. */
    ble_gap_terminate(peer->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
}

/**
 * Called when service discovery of the specified peer has completed.
 */
static void
blecent_on_disc_complete(const struct peer *peer, int status, void *arg)
{
    if (status != 0) {
        /* Service discovery failed.  Terminate the connection. */
        MODLOG_DFLT(ERROR, "Error: Service discovery failed; status=%d conn_handle=%d\n", status, peer->conn_handle);
        ble_gap_terminate(peer->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
        return;
    }

    /* Service discovery has completed successfully.  Now we have a complete
     * list of services, characteristics, and descriptors that the peer
     * supports.
     */
    MODLOG_DFLT(ERROR, "Service discovery complete; status=%d conn_handle=%d\n", status, peer->conn_handle);

    /* Now perform three GATT procedures against the peer: read,
     * write, and subscribe to notifications.
     */
    blecent_read_write_subscribe(peer);
}

/**
 * Initiates the GAP general discovery procedure.
 */
static void
blecent_scan(void)
{
    uint8_t own_addr_type;
    struct ble_gap_disc_params disc_params;
    int rc;

    /* Figure out address to use while advertising (no privacy for now) */
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
        return;
    }

    // We're scanning continuously and want to see repeated advertisements
    disc_params.filter_duplicates = 0;

    /**
     * Perform a passive scan.  I.e., don't send follow-up scan requests to
     * each advertiser.
     */
    disc_params.passive = 1;

    /* Use defaults for the rest of the parameters. */
    disc_params.itvl = 0;
    disc_params.window = 0;
    disc_params.filter_policy = 0;
    disc_params.limited = 0;

    rc = ble_gap_disc(own_addr_type, BLE_HS_FOREVER, &disc_params,
                      blecent_gap_event, NULL);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "Error initiating GAP discovery procedure; rc=%d\n",
                    rc);
    }
}

/**
 * Indicates whether we should try to connect to the sender of the specified
 * advertisement.  The function returns a positive result if the device
 * advertises connectability and support for the Alert Notification service.
 */
static int
blecent_should_connect(const struct ble_gap_disc_desc *disc)
{
    struct ble_hs_adv_fields fields;
    int rc;
    int i;

    /* The device has to be advertising connectability. */
    if (disc->event_type != BLE_HCI_ADV_RPT_EVTYPE_ADV_IND &&
            disc->event_type != BLE_HCI_ADV_RPT_EVTYPE_DIR_IND) {

        return 0;
    }

    rc = ble_hs_adv_parse_fields(&fields, disc->data, disc->length_data);
    if (rc != 0) {
        return rc;
    }

    ESP_LOGI(TAG, "%d", fields.num_uuids16);
    for (i = 0; i < fields.num_uuids16; i++) {
        ESP_LOGI(TAG, "  %x", fields.uuids16[i].value);
        // if (ble_uuid_u16(&fields.uuids16[i].u) == BLECENT_SVC_ALERT_UUID) {
        //   return 1;
        // }
    }

    // if (strlen(CONFIG_EXAMPLE_PEER_ADDR) && (strncmp(CONFIG_EXAMPLE_PEER_ADDR, "ADDR_ANY", strlen("ADDR_ANY")) != 0)) {
    //   ESP_LOGI(TAG, "Peer address from menuconfig: %s", CONFIG_EXAMPLE_PEER_ADDR);
    //   /* Convert string to address */
    //   sscanf(CONFIG_EXAMPLE_PEER_ADDR, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
    //          &peer_addr[5], &peer_addr[4], &peer_addr[3],
    //          &peer_addr[2], &peer_addr[1], &peer_addr[0]);
    //   if (memcmp(peer_addr, disc->addr.val, sizeof(disc->addr.val)) != 0) {
    //     return 0;
    //   }
    // }
    //
    // /* The device has to advertise support for the Alert Notification
    //  * service (0x1811).
    //  */
    // for (i = 0; i < fields.num_uuids16; i++) {
    //   if (ble_uuid_u16(&fields.uuids16[i].u) == BLECENT_SVC_ALERT_UUID) {
    //     return 1;
    //   }
    // }

    return 0;
}

/**
 * Connects to the sender of the specified advertisement of it looks
 * interesting.  A device is "interesting" if it advertises connectability and
 * support for the Alert Notification service.
 */
static void
blecent_connect_if_interesting(const struct ble_gap_disc_desc *disc)
{
    uint8_t own_addr_type;
    int rc;

    /* Don't do anything if we don't care about this advertiser. */
    if (!blecent_should_connect(disc)) {
        return;
    }

    /* Scanning must be stopped before a connection can be initiated. */
    rc = ble_gap_disc_cancel();
    if (rc != 0) {
        MODLOG_DFLT(DEBUG, "Failed to cancel scan; rc=%d\n", rc);
        return;
    }

    /* Figure out address to use for connect (no privacy for now) */
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
        return;
    }

    /* Try to connect the the advertiser.  Allow 30 seconds (30000 ms) for
     * timeout.
     */

    rc = ble_gap_connect(own_addr_type, &disc->addr, 30000, NULL,
                         blecent_gap_event, NULL);
    if (rc != 0) {
        MODLOG_DFLT(ERROR, "Error: Failed to connect to device; addr_type=%d "
                    "addr=%s; rc=%d\n",
                    disc->addr.type, addr_str(disc->addr.val), rc);
        return;
    }
}

// Convert RSSI dBm to audible frequency in Hz
// Received signal strength indication in dBm (127 if unavailable)
int dbm_to_hz(int dbm)
{
    int hz = -(-dbm - 100) * 20;
    if (hz < 10) {
        hz = 10;
    }
    if (hz > 900) {
        hz = 900;
    }
    return hz;
}

// Format address msg and address.
// msg must be 0-4 chars.
// E.g: ADDR3649a1e5c578
void addr_to_str(char *buf, int maxlen, char *msg, ble_addr_t *addr)
{
    snprintf(buf, maxlen, "%s %02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
             msg,
             addr->val[0],
             addr->val[1],
             addr->val[2],
             addr->val[3],
             addr->val[4],
             addr->val[5]
            );
}

void log_addr(char *msg, ble_addr_t *addr)
{
    char buf[128];
    addr_to_str(buf, 128, msg, addr);
    ESP_LOGI(TAG, "%s", buf);
}

void beep_rssi(int8_t rssi)
{
    int freq_hz = dbm_to_hz(rssi);
    beep(freq_hz, 250);
}

int addr_are_equal(ble_addr_t *a, ble_addr_t *b)
{
    return ble_addr_cmp(a, b) == 0;
}

/**
 * The nimble host executes this callback when a GAP event occurs.  The
 * application associates a GAP event callback with each connection that is
 * established.  blecent uses the same callback for all connections.
 *
 * @param event                 The event being signalled.
 * @param arg                   Application-specified argument; unused by
 *                                  blecent.
 *
 * @return                      0 if the application successfully handled the
 *                                  event; nonzero on failure.  The semantics
 *                                  of the return code is specific to the
 *                                  particular GAP event being signalled.
 */
static int
blecent_gap_event(struct ble_gap_event *event, void *arg)
{
    if (event->type != BLE_GAP_EVENT_DISC) {
        return 0;
    }

    ESP_LOGI(TAG, "listenBeaconIndex: %d", listenBeaconIndex);

    int8_t rssi = event->disc.rssi;
    ble_addr_t *addr = &event->disc.addr;

    // 127 is a reserved value for unavailable signal strength, meaning it's probably not a beacon.
    if (rssi == 127) {
        return 0;
    }

    // int ret;
    // struct ble_hs_adv_fields fields;
    //
    // ret = ble_hs_adv_parse_fields(&fields, event->disc.data, event->disc.length_data);
    // ESP_ERROR_CHECK(ret);
    //
    // if (fields.name_is_complete) {
    //   ESP_LOGE(TAG, "NAME: %s", fields.name);
    //   ESP_LOGE(TAG, "LEN: %d", fields.name_len);
    // }
    //
    // print_adv_fields(&fields);

    log_addr("RCV ", addr);
    // lcd_print_addr("RCV ", addr);

    if (addr_are_equal(addr, &BEACONS[listenBeaconIndex].bleAddr)) {
        beep_rssi(rssi);
    }
    // else {
    //   lcd_print_addr("UNK ", addr);
    // }

    return 0;
}

// switch (event->type) {
//   case BLE_GAP_EVENT_DISC:
//
//     return 0;
//
//     // // ESP_LOGI(TAG, "%d", event->disc.length_data);
//     // ESP_LOGI(TAG, "rssi             %d", event->disc.rssi);
//     // ESP_LOGI(TAG, "name_is_complete %d", fields.name_is_complete);
//     // ESP_LOGI(TAG, "name_len         %d", fields.name_len);
//     // ESP_LOGI(TAG, "num_uuids16      %d", fields.num_uuids16);
//     // ESP_LOGI(TAG, "num_uuids32      %d", fields.num_uuids32);
//     // ESP_LOGI(TAG, "num_uuids128     %d", fields.num_uuids128);
//     //
//     // ESP_LOGI(TAG, "num_uuids128     %d", event->disc.);
//     //
//     //
//     //   if (memcmp(peer_addr, disc->addr.val, sizeof(disc->addr.val)) != 0) {
//     //     return 0;
//     //   }
//     // }
//
//     // for (int i = 0; i < fields.num_uuids16; i++) {
//     //   ESP_LOGI(TAG, "  %x", fields.uuids16[i].value);
//     //   // if (ble_uuid_u16(&fields.uuids16[i].u) == BLECENT_SVC_ALERT_UUID) {
//     //   //   return 1;
//     //   // }
//     // }
//
//     // ESP_LOGI(TAG, "    %d", fields.);
//
//     // case BLE_GAP_EVENT_ADV_COMPLETE:
//     //   ESP_LOGI(TAG, "BLE_GAP_EVENT_ADV_COMPLETE");
//     //   ESP_LOGI(TAG, "%d", event->adv_complete.reason);
//     //   print_adv_fields(&fields);
//     //   return 0;
//     //
//     // case BLE_GAP_EVENT_EXT_DISC:
//     //   ESP_LOGI(TAG, "BLE_GAP_EVENT_EXT_DISC");
//     //   // ESP_LOGI(TAG, "%d", event->adv_complete.reason);
//     //   return 0;
//
//
//     // if (strlen(CONFIG_EXAMPLE_PEER_ADDR) && (strncmp(CONFIG_EXAMPLE_PEER_ADDR, "ADDR_ANY", strlen("ADDR_ANY")) != 0)) {
//     //   ESP_LOGI(TAG, "Peer address from menuconfig: %s", CONFIG_EXAMPLE_PEER_ADDR);
//     //   /* Convert string to address */
//     //   sscanf(CONFIG_EXAMPLE_PEER_ADDR, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
//     //          &peer_addr[5], &peer_addr[4], &peer_addr[3],
//     //          &peer_addr[2], &peer_addr[1], &peer_addr[0]);
//     //   if (memcmp(peer_addr, disc->addr.val, sizeof(disc->addr.val)) != 0) {
//     //     return 0;
//     //   }
//     // }
//
//     /* An advertisment report was received during GAP discovery. */
//     // print_adv_fields(&fields);
//
//     /* Try to connect to the advertiser if it looks interesting. */
//     // blecent_connect_if_interesting(&event->disc);
//     // return 0;
//
//     //   if (event->connect.status == 0) {
//     //   MODLOG_DFLT(INFO, "disconnect; reason=%d ", event->disconnect.reason);
//     //   print_conn_desc(&event->disconnect.conn);
//     //   peer_delete(event->disconnect.conn.conn_handle);
//     //               event->disc_complete.reason);
//     //               event->enc_change.status);
//     //   rc = ble_gap_conn_find(event->enc_change.conn_handle, &desc);
//     //               event->notify_rx.indication ?
//     //               "indication" :
//     //               "notification",
//     //               event->notify_rx.conn_handle,
//     //               event->notify_rx.attr_handle,
//     //               OS_MBUF_PKTLEN(event->notify_rx.om));
//     //
//     //   MODLOG_DFLT(INFO, "mtu update event; conn_handle=%d cid=%d mtu=%d\n",
//     //               event->mtu.conn_handle,
//     //               event->mtu.channel_id,
//     //               event->mtu.value);
//
//   default:
//     return 0;
// }

static void
blecent_on_reset(int reason)
{
    MODLOG_DFLT(ERROR, "Resetting state; reason=%d\n", reason);
}

static void
blecent_on_sync(void)
{
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
    assert(rc == 0);

    /* Begin scanning for a peripheral to connect to. */
    blecent_scan();
}

void
blecent_host_task(void *param)
{
    ESP_LOGI(TAG, "BLE Host Task Started");
    /* This function will return only when nimble_port_stop() is executed */
    nimble_port_run();

    nimble_port_freertos_deinit();
}



// ################################################################



static uint32_t get_time_sec()
{
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec;
}


void
app_main(void)
{
    esp_log_level_set("*", ESP_LOG_INFO);

    ESP_LOGI(TAG, "### MAIN START");

    int rc;

    /* Initialize NVS — it is used to store PHY calibration data */
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    ESP_ERROR_CHECK(i2cdev_init());

    lcd_init();

    lcd_print(0, "Starting...");

    ESP_LOGD(TAG, "ledc_init() START");
    ledc_init();
    ESP_LOGD(TAG, "ledc_init() END");

    // Not available and not needed?
    // ESP_ERROR_CHECK(esp_nimble_hci_and_controller_init());

    ESP_LOGD(TAG, "nimble_port_init() START");
    nimble_port_init();
    ESP_LOGD(TAG, "nimble_port_init() END");

    /* Configure the host. */
    ble_hs_cfg.reset_cb = blecent_on_reset;
    ble_hs_cfg.sync_cb = blecent_on_sync;
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;

    /* Initialize data structures to track connected peers. */
    rc = peer_init(MYNEWT_VAL(BLE_MAX_CONNECTIONS), 64, 64, 64);
    assert(rc == 0);

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("nimble-blecent");
    assert(rc == 0);

    ble_store_config_init();

    nimble_port_freertos_init(blecent_host_task);

    // Button interrupts

    gpio_config_t io_conf = {};
    io_conf.intr_type = GPIO_INTR_NEGEDGE;
    io_conf.pin_bit_mask = GPIO_INPUT_PIN_SEL;
    io_conf.mode = GPIO_MODE_INPUT;
    io_conf.pull_up_en = 1;
    gpio_config(&io_conf);

    // Create a queue to handle GPIO events from ISR
    // gpio_evt_queue = xQueueCreate(10, sizeof(uint32_t));

    // install gpio isr service
    gpio_install_isr_service(ESP_INTR_FLAG_DEFAULT);
    // Hook ISR handler for specific GPIO pin
    gpio_isr_handler_add(GPIO_BUTTON_SELECT_BEACON, gpio_isr_select_beacon_handler, (void *) GPIO_BUTTON_SELECT_BEACON);

    // printf("Minimum free heap size: %d bytes\n", esp_get_minimum_free_heap_size());

    xTaskCreate(secondCounterTask, "secondCounterTask", configMINIMAL_STACK_SIZE * 5, NULL, 5, NULL);

    lcd_print(0, BEACONS[listenBeaconIndex].nickName);

    ESP_LOGI(TAG, "### MAIN END");

    // We don't have to enter an endless loop here.
}
